# -*- mode: ruby -*-
# vi:set ft=ruby sw=2 ts=2 sts=2:

# Define how much memory your computer has in GB (e.g. 8, 16)
RAM_SIZE = 16

# Define how many CPU cores you have.
CPU_CORES = 8

# Internal network prefix for the VM network
IP_NW = "192.168.1."

# Calculate resource amounts based on RAM/CPU
ram_selector = (RAM_SIZE / 4) * 4
if ram_selector < 8
  raise "Unsufficient memory #{RAM_SIZE}GB. min 8GB"
end
RESOURCES = {
  "control" => {
    1 => {
      "ram" => [ram_selector * 128, 2048].max(),
      "cpu" => CPU_CORES >= 12 ? 4 : 2,
    },
    2 => {
      "ram" => [ram_selector * 128, 2048].min(),
      "cpu" => CPU_CORES > 8 ? 2 : 1,
    },
  },
  "worker" => {
    "ram" => [ram_selector * 128, 4096].min(),
    "cpu" => (((CPU_CORES / 4) * 4) - 4) / 4,
  },
}

# Setup DNS
def setup_dns(node)
  node.vm.provision "setup-hosts", type: "shell", path: "ubuntu/vagrant/setup-hosts.sh" do |s|
    s.args = ["Ethernet", node.vm.hostname]
  end
  node.vm.provision "setup-dns", type: "shell", path: "ubuntu/update-dns.sh"
end

# Provision Kubernetes Node
def provision_kubernetes_node(node)
  node.vm.provision "setup-kernel", type: "shell", path: "ubuntu/setup-kernel.sh"
  node.vm.provision "setup-ssh", type: "shell", path: "ubuntu/ssh.sh"
  setup_dns node
  node.vm.provision "shell", inline: "ln -s /vagrant/ubuntu/cert_verify.sh /home/vagrant/cert_verify.sh"
end

NUM_CONTROL_NODES = 2
NUM_WORKER_NODE = 2
MASTER_IP_START = 10
NODE_IP_START = 20
LB_IP_START = 30

# Vagrant Configuration
Vagrant.configure("2") do |config|
  config.vm.box = "generic/ubuntu2204"
  config.vm.boot_timeout = 900  # General boot timeout for all VMs

  config.vm.box_check_update = false

  # Provision Control Nodes
  (1..NUM_CONTROL_NODES).each do |i|
    config.vm.define "controlplane0#{i}" do |node|
      node.vm.provider "hyperv" do |hv|
        hv.vmname = "kubernetes-ha-controlplane-#{i}"
        hv.memory = RESOURCES["control"][i > 2 ? 2 : i]["ram"]
        hv.cpus = RESOURCES["control"][i > 2 ? 2 : i]["cpu"]
        hv.enable_virtualization_extensions = true
        hv.ip_address_timeout = 300  # Hyper-V specific IP address assignment timeout
      end
      node.vm.hostname = "controlplane0#{i}"
      node.vm.network :private_network, ip: IP_NW + "#{MASTER_IP_START + i}"
      node.vm.network "forwarded_port", guest: 22, host: "#{2710 + i}"
      provision_kubernetes_node node
      if i == 1
        node.vm.provision "file", source: "./ubuntu/tmux.conf", destination: "$HOME/.tmux.conf"
        node.vm.provision "file", source: "./ubuntu/vimrc", destination: "$HOME/.vimrc"
        node.vm.provision "file", source: "../tools/approve-csr.sh", destination: "$HOME/approve-csr.sh"
      end
    end
  end

  # Provision Load Balancer
  config.vm.define "loadbalancer" do |node|
    node.vm.provider "hyperv" do |hv|
      hv.vmname = "kubernetes-ha-lb"
      hv.memory = 1024
      hv.cpus = 1
    end
    node.vm.hostname = "loadbalancer"
    node.vm.network :private_network, ip: IP_NW + "#{LB_IP_START}"
    node.vm.network "forwarded_port", guest: 22, host: 2730
    node.vm.provision "setup-ssh", type: "shell", path: "ubuntu/ssh.sh"
    setup_dns node
  end

  # Provision Worker Nodes
  (1..NUM_WORKER_NODE).each do |i|
    config.vm.define "node0#{i}" do |node|
      node.vm.provider "hyperv" do |hv|
        hv.vmname = "kubernetes-ha-node-#{i}"
        hv.memory = RESOURCES["worker"]["ram"]
        hv.cpus = RESOURCES["worker"]["cpu"]
        hv.ip_address_timeout = 300  # Hyper-V specific IP address assignment timeout
      end
      node.vm.hostname = "node0#{i}"
      node.vm.network :private_network, ip: IP_NW + "#{NODE_IP_START + i}"
      node.vm.network "forwarded_port", guest: 22, host: "#{2720 + i}"
      provision_kubernetes_node node
    end
  end
end
